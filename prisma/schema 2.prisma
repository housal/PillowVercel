generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)

  // Relations
  properties    Property[]
  bookings      Booking[]
  reviews       Review[]
}

enum UserRole {
  USER
  HOST
  ADMIN
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  price       Float
  priceUnit   String   // "hour", "day", "month", etc.
  type        String   // "event", "meeting", "party", "office", "commercial", "residential"
  capacity    Int?
  size        Int?     // in square feet
  bedrooms    Int?
  bathrooms   Int?
  amenities   String?  // JSON string of amenities
  images      String?  // JSON string of image URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
  availability Availability[]
}

model Booking {
  id          String   @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  guestCount  Int?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Availability {
  id          String   @id @default(cuid())
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  
  // Relations
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, dayOfWeek])
}

